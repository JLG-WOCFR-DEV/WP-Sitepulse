<?php
/**
 * Lightweight request profiler utilities.
 *
 * @package SitePulse
 */

if (!defined('ABSPATH')) {
    exit;
}

/**
 * Registers the hooks required to profile the current request.
 *
 * @return void
 */
function sitepulse_request_profiler_bootstrap() {
    if (!is_admin()) {
        return;
    }

    add_action('init', 'sitepulse_request_profiler_maybe_start', 1);
    add_action('admin_notices', 'sitepulse_request_profiler_render_notices');
}

/**
 * Determines whether the current visitor can trigger a profile.
 *
 * @return bool
 */
function sitepulse_request_profiler_can_profile() {
    if (!function_exists('sitepulse_get_capability')) {
        return current_user_can('manage_options');
    }

    return current_user_can(sitepulse_get_capability());
}

/**
 * Checks the current request and activates the profiler when required.
 *
 * @return void
 */
function sitepulse_request_profiler_maybe_start() {
    if (wp_doing_ajax()) {
        return;
    }

    if (!isset($_GET['sitepulse-profile']) || $_GET['sitepulse-profile'] !== '1') { // phpcs:ignore WordPress.Security.NonceVerification.Recommended
        return;
    }

    if (!sitepulse_request_profiler_can_profile()) {
        sitepulse_request_profiler_add_notice(
            esc_html__("Vous n'avez pas les permissions nécessaires pour profiler cette page.", 'sitepulse'),
            'error'
        );

        return;
    }

    $nonce_action = defined('SITEPULSE_NONCE_ACTION_REQUEST_PROFILER')
        ? SITEPULSE_NONCE_ACTION_REQUEST_PROFILER
        : 'sitepulse_request_profiler';

    $nonce = isset($_GET['_wpnonce']) ? sanitize_text_field(wp_unslash($_GET['_wpnonce'])) : ''; // phpcs:ignore WordPress.Security.NonceVerification.Recommended

    if ($nonce === '' || !wp_verify_nonce($nonce, $nonce_action)) {
        sitepulse_request_profiler_add_notice(
            esc_html__("La vérification de sécurité a échoué. Merci de réessayer.", 'sitepulse'),
            'error'
        );

        return;
    }

    sitepulse_request_profiler_begin();
}

/**
 * Records an admin notice for the current request.
 *
 * @param string $message Notice message.
 * @param string $type    Notice type (info, success, warning, error).
 *
 * @return void
 */
function sitepulse_request_profiler_add_notice($message, $type = 'info') {
    if (!is_string($message) || $message === '') {
        return;
    }

    if (!isset($GLOBALS['sitepulse_request_profiler_notices'])) {
        $GLOBALS['sitepulse_request_profiler_notices'] = [];
    }

    $type = in_array($type, ['info', 'success', 'warning', 'error'], true) ? $type : 'info';

    $GLOBALS['sitepulse_request_profiler_notices'][] = [
        'message' => $message,
        'type'    => $type,
    ];
}

/**
 * Outputs the notices generated by the request profiler.
 *
 * @return void
 */
function sitepulse_request_profiler_render_notices() {
    if (empty($GLOBALS['sitepulse_request_profiler_notices'])) {
        return;
    }

    foreach ($GLOBALS['sitepulse_request_profiler_notices'] as $notice) {
        $type    = isset($notice['type']) ? $notice['type'] : 'info';
        $message = isset($notice['message']) ? $notice['message'] : '';

        if ($message === '') {
            continue;
        }

        printf(
            '<div class="notice notice-%1$s"><p>%2$s</p></div>',
            esc_attr($type),
            $message // Escaped when the notice was registered.
        );
    }
}

/**
 * Activates the profiler for the current request.
 *
 * @return void
 */
function sitepulse_request_profiler_begin() {
    global $wpdb;

    $context = [
        'active'      => true,
        'start_time'  => microtime(true),
        'memory_base' => memory_get_usage(true),
        'user_id'     => get_current_user_id(),
    ];

    if ($wpdb instanceof wpdb) {
        $context['previous_save_queries'] = isset($wpdb->save_queries) ? (bool) $wpdb->save_queries : false;
        $wpdb->save_queries              = true;
    }

    $GLOBALS['sitepulse_request_profiler_context'] = $context;

    add_action('shutdown', 'sitepulse_request_profiler_finish', PHP_INT_MAX);
}

/**
 * Finalizes the profiler and stores the captured metrics.
 *
 * @return void
 */
function sitepulse_request_profiler_finish() {
    global $wpdb;

    if (empty($GLOBALS['sitepulse_request_profiler_context']) || !is_array($GLOBALS['sitepulse_request_profiler_context'])) {
        return;
    }

    $context = $GLOBALS['sitepulse_request_profiler_context'];
    unset($GLOBALS['sitepulse_request_profiler_context']);

    if (empty($context['active'])) {
        return;
    }

    if ($wpdb instanceof wpdb && isset($context['previous_save_queries'])) {
        $wpdb->save_queries = (bool) $context['previous_save_queries'];
    }

    $duration_ms = 0.0;

    if (isset($context['start_time'])) {
        $duration_ms = max(0, (microtime(true) - (float) $context['start_time']) * 1000.0);
    }

    $trace = [
        'timestamp'       => current_time('timestamp'),
        'url'             => sitepulse_request_profiler_get_request_uri(),
        'duration_ms'     => round($duration_ms, 2),
        'memory_peak_mb'  => round(memory_get_peak_usage(true) / MB_IN_BYTES, 2),
        'query_count'     => $wpdb instanceof wpdb ? (int) $wpdb->num_queries : 0,
        'slow_queries'    => sitepulse_request_profiler_collect_slow_queries($wpdb),
        'user_id'         => isset($context['user_id']) ? (int) $context['user_id'] : 0,
    ];

    sitepulse_request_profiler_store_trace($trace);
    sitepulse_request_profiler_cache_last_trace($trace);
}

/**
 * Returns the current request URI sanitized for storage.
 *
 * @return string
 */
function sitepulse_request_profiler_get_request_uri() {
    $uri = isset($_SERVER['REQUEST_URI']) ? wp_unslash((string) $_SERVER['REQUEST_URI']) : '';

    if ($uri === '') {
        return admin_url('admin.php');
    }

    if (strpos($uri, 'http') === 0) {
        $normalized = esc_url_raw($uri);

        return $normalized !== '' ? $normalized : admin_url('admin.php');
    }

    $site_url = site_url('/');
    $normalized = esc_url_raw($site_url . ltrim($uri, '/'));

    return $normalized !== '' ? $normalized : admin_url('admin.php');
}

/**
 * Extracts the slowest database queries recorded during the request.
 *
 * @param wpdb|null $wpdb  WordPress database instance.
 * @param int|null  $limit Optional. Number of queries to keep. Defaults to the history limit.
 *
 * @return array<int,array{sql:string,time_ms:float,caller:string}>
 */
function sitepulse_request_profiler_collect_slow_queries($wpdb, $limit = null) {
    if (!is_int($limit) || $limit < 1) {
        $limit = defined('SITEPULSE_DEFAULT_REQUEST_PROFILER_HISTORY_LIMIT')
            ? (int) SITEPULSE_DEFAULT_REQUEST_PROFILER_HISTORY_LIMIT
            : 5;
    }

    if (!($wpdb instanceof wpdb) || empty($wpdb->queries) || !is_array($wpdb->queries)) {
        return [];
    }

    $slow = [];

    foreach ($wpdb->queries as $query) {
        if (!is_array($query) || !isset($query[0], $query[1])) {
            continue;
        }

        $sql      = sitepulse_request_profiler_trim_query((string) $query[0]);
        $duration = is_numeric($query[1]) ? (float) $query[1] : 0.0;
        $caller   = isset($query[2]) ? sanitize_text_field((string) $query[2]) : '';

        $slow[] = [
            'sql'     => $sql,
            'time_ms' => round($duration * 1000.0, 2),
            'caller'  => $caller,
        ];
    }

    usort(
        $slow,
        static function ($a, $b) {
            return $b['time_ms'] <=> $a['time_ms'];
        }
    );

    return array_slice($slow, 0, $limit);
}

/**
 * Trims a SQL query string to avoid oversized storage.
 *
 * @param string $sql Raw SQL statement.
 *
 * @return string
 */
function sitepulse_request_profiler_trim_query($sql) {
    $sql = trim(preg_replace('/\s+/', ' ', $sql));
    $max_length = 300;

    if (function_exists('mb_strlen') && function_exists('mb_substr')) {
        if (mb_strlen($sql) > $max_length) {
            $sql = mb_substr($sql, 0, $max_length - 1) . '…';
        }
    } elseif (strlen($sql) > $max_length) {
        $sql = substr($sql, 0, $max_length - 1) . '…';
    }

    return $sql;
}

/**
 * Stores a trace in the history option while enforcing the retention limit.
 *
 * @param array<string,mixed> $trace Trace payload.
 *
 * @return void
 */
function sitepulse_request_profiler_store_trace($trace) {
    if (!is_array($trace) || empty($trace)) {
        return;
    }

    $option_key = defined('SITEPULSE_OPTION_REQUEST_PROFILER_HISTORY')
        ? SITEPULSE_OPTION_REQUEST_PROFILER_HISTORY
        : 'sitepulse_request_profiler_history';

    $history = get_option($option_key, []);

    if (!is_array($history)) {
        $history = [];
    }

    array_unshift($history, sitepulse_request_profiler_normalize_trace($trace));

    $limit = defined('SITEPULSE_DEFAULT_REQUEST_PROFILER_HISTORY_LIMIT')
        ? (int) SITEPULSE_DEFAULT_REQUEST_PROFILER_HISTORY_LIMIT
        : 5;

    if ($limit > 0) {
        $history = array_slice($history, 0, $limit);
    }

    update_option($option_key, $history, false);
}

/**
 * Normalizes a trace payload before storage.
 *
 * @param array<string,mixed> $trace Raw trace data.
 *
 * @return array<string,mixed>
 */
function sitepulse_request_profiler_normalize_trace($trace) {
    $timestamp = isset($trace['timestamp']) && is_numeric($trace['timestamp'])
        ? (int) $trace['timestamp']
        : current_time('timestamp');

    $duration_ms = isset($trace['duration_ms']) && is_numeric($trace['duration_ms'])
        ? round((float) $trace['duration_ms'], 2)
        : 0.0;

    $memory_peak_mb = isset($trace['memory_peak_mb']) && is_numeric($trace['memory_peak_mb'])
        ? round((float) $trace['memory_peak_mb'], 2)
        : 0.0;

    $query_count = isset($trace['query_count']) && is_numeric($trace['query_count'])
        ? (int) $trace['query_count']
        : 0;

    $url = isset($trace['url']) && is_string($trace['url']) ? esc_url_raw($trace['url']) : sitepulse_request_profiler_get_request_uri();

    $user_id = isset($trace['user_id']) && is_numeric($trace['user_id']) ? (int) $trace['user_id'] : 0;

    $slow_queries = [];

    if (isset($trace['slow_queries']) && is_array($trace['slow_queries'])) {
        foreach ($trace['slow_queries'] as $query) {
            if (!is_array($query)) {
                continue;
            }

            $slow_queries[] = [
                'sql'     => isset($query['sql']) ? sitepulse_request_profiler_trim_query((string) $query['sql']) : '',
                'time_ms' => isset($query['time_ms']) && is_numeric($query['time_ms'])
                    ? round((float) $query['time_ms'], 2)
                    : 0.0,
                'caller'  => isset($query['caller']) ? sanitize_text_field((string) $query['caller']) : '',
            ];
        }
    }

    return [
        'timestamp'      => $timestamp,
        'url'            => $url,
        'duration_ms'    => $duration_ms,
        'memory_peak_mb' => $memory_peak_mb,
        'query_count'    => $query_count,
        'slow_queries'   => $slow_queries,
        'user_id'        => $user_id,
    ];
}

/**
 * Retrieves the stored request traces.
 *
 * @param int|null $limit Optional. Maximum number of entries to return.
 *
 * @return array<int,array<string,mixed>>
 */
function sitepulse_request_profiler_get_history($limit = null) {
    $option_key = defined('SITEPULSE_OPTION_REQUEST_PROFILER_HISTORY')
        ? SITEPULSE_OPTION_REQUEST_PROFILER_HISTORY
        : 'sitepulse_request_profiler_history';

    $history = get_option($option_key, []);

    if (!is_array($history)) {
        return [];
    }

    if (is_int($limit) && $limit > 0) {
        $history = array_slice($history, 0, $limit);
    }

    return array_map('sitepulse_request_profiler_normalize_trace', $history);
}

/**
 * Saves the last trace in a transient scoped to the user.
 *
 * @param array<string,mixed> $trace Trace payload.
 *
 * @return void
 */
function sitepulse_request_profiler_cache_last_trace($trace) {
    if (!is_array($trace) || empty($trace)) {
        return;
    }

    if (!isset($trace['user_id']) || !is_numeric($trace['user_id'])) {
        return;
    }

    $user_id = (int) $trace['user_id'];

    if ($user_id <= 0) {
        return;
    }

    $prefix = defined('SITEPULSE_TRANSIENT_REQUEST_PROFILER_LAST_TRACE_PREFIX')
        ? SITEPULSE_TRANSIENT_REQUEST_PROFILER_LAST_TRACE_PREFIX
        : 'sitepulse_request_profiler_last_trace_';

    set_transient($prefix . $user_id, sitepulse_request_profiler_normalize_trace($trace), MINUTE_IN_SECONDS * 10);
}

/**
 * Retrieves the last trace for a given user.
 *
 * @param int $user_id User identifier.
 *
 * @return array<string,mixed>|null
 */
function sitepulse_request_profiler_get_last_trace_for_user($user_id) {
    $user_id = (int) $user_id;

    if ($user_id <= 0) {
        return null;
    }

    $prefix = defined('SITEPULSE_TRANSIENT_REQUEST_PROFILER_LAST_TRACE_PREFIX')
        ? SITEPULSE_TRANSIENT_REQUEST_PROFILER_LAST_TRACE_PREFIX
        : 'sitepulse_request_profiler_last_trace_';

    $trace = get_transient($prefix . $user_id);

    if (is_array($trace) && !empty($trace)) {
        return sitepulse_request_profiler_normalize_trace($trace);
    }

    $history = sitepulse_request_profiler_get_history();

    foreach ($history as $entry) {
        if (isset($entry['user_id']) && (int) $entry['user_id'] === $user_id) {
            return $entry;
        }
    }

    return null;
}

/**
 * Builds the URL used to trigger a profile of the current page.
 *
 * @return string
 */
function sitepulse_request_profiler_get_trigger_url() {
    $nonce_action = defined('SITEPULSE_NONCE_ACTION_REQUEST_PROFILER')
        ? SITEPULSE_NONCE_ACTION_REQUEST_PROFILER
        : 'sitepulse_request_profiler';

    $base_url = admin_url('admin.php?page=sitepulse-speed');

    $url = add_query_arg(
        [
            'sitepulse-profile' => '1',
        ],
        $base_url
    );

    return wp_nonce_url($url, $nonce_action);
}
